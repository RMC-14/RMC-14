using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._RMC14.Xenonids.Construction.Tunnel;
[GenerateTypedNameReferences]
public sealed partial class SelectDestinationTunnelWindow : DefaultWindow
{
    private const float BlipUpdateInterval = 1.0f;
    private float _timeSinceLastUpdate;
    private System.Action? _blipUpdateCallback;

    public SelectDestinationTunnelWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title = Loc.GetString("xeno-ui-select-destination-tunnel-title");
        SelectButton.Text = Loc.GetString("xeno-ui-select-destination-tunnel-submit-text");

        UpdateSelectedTunnelDisplay(null);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        _timeSinceLastUpdate += args.DeltaSeconds;

        if (_timeSinceLastUpdate >= BlipUpdateInterval)
        {
            _timeSinceLastUpdate = 0.0f;
            _blipUpdateCallback?.Invoke();
        }
    }

    public void SetBlipUpdateCallback(System.Action callback)
    {
        _blipUpdateCallback = callback;
        _timeSinceLastUpdate = 0.0f;
    }

    public void UpdateSelectedTunnelDisplay(string? selectedTunnelName)
    {
        if (selectedTunnelName == null)
        {
            SelectedTunnelLabel.Text = "None selected";
            SelectedTunnelLabel.ToolTip = "None selected";
            SelectedTunnelLabel.StyleClasses.Clear();
            SelectedTunnelLabel.StyleClasses.Add("LabelSecondary");
            SelectButton.Disabled = true;
        }
        else
        {
            var displayText = $"Selected: {selectedTunnelName}";
            SelectedTunnelLabel.Text = displayText;
            SelectedTunnelLabel.ToolTip = displayText;
            SelectedTunnelLabel.StyleClasses.Clear();
            SelectedTunnelLabel.StyleClasses.Add("LabelKeyHighlight");
            SelectButton.Disabled = false;
        }
    }

    public void UpdateCurrentTunnelDisplay(string? currentTunnelName)
    {
        var displayText = currentTunnelName != null
            ? $"Current: {currentTunnelName}"
            : "Current: Unknown";
        CurrentTunnelLabel.Text = displayText;
        CurrentTunnelLabel.ToolTip = displayText;
    }
}
