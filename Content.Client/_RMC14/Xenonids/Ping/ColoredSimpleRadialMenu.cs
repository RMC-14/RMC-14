using Content.Client.UserInterface.Controls;
using Robust.Client.Graphics;
using Robust.Client.Input;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using System.Numerics;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;

namespace Content.Client._RMC14.Xenonids.Ping;

[GenerateTypedNameReferences]
public partial class ColoredSimpleRadialMenu : RadialMenu
{
    private EntityUid? _attachMenuToEntity;

    [Dependency] private readonly IClyde _clyde = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IInputManager _inputManager = default!;

    public ColoredSimpleRadialMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void Track(EntityUid owner)
    {
        _attachMenuToEntity = owner;
    }

    public void SetButtons(IEnumerable<RadialMenuOption> models, SimpleRadialMenuSettings? settings = null)
    {
        ClearExistingChildrenRadialButtons();

        var sprites = _entManager.System<SpriteSystem>();
        Fill(models, sprites, Children, settings ?? new SimpleRadialMenuSettings());
    }

    public void OpenOverMouseScreenPosition()
    {
        var vpSize = _clyde.ScreenSize;
        OpenCenteredAt(_inputManager.MouseScreenPosition.Position / vpSize);
    }

    private void Fill(
        IEnumerable<RadialMenuOption> models,
        SpriteSystem sprites,
        ICollection<Control> rootControlChildren,
        SimpleRadialMenuSettings settings
    )
    {
        var rootContainer = new RadialContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            InitialRadius = settings.DefaultContainerRadius,
            ReserveSpaceForHiddenChildren = false,
            Visible = true
        };
        rootControlChildren.Add(rootContainer);

        foreach (var model in models)
        {
            if (model is RadialMenuNestedLayerOption nestedMenuModel)
            {
                var linkButton = RecursiveContainerExtraction(sprites, rootControlChildren, nestedMenuModel, settings);
                linkButton.Visible = true;
                rootContainer.AddChild(linkButton);
            }
            else
            {
                var rootButtons = ConvertToButton(model, sprites, settings, false);
                rootContainer.AddChild(rootButtons);
            }
        }
    }

    private RadialMenuTextureButton RecursiveContainerExtraction(
        SpriteSystem sprites,
        ICollection<Control> rootControlChildren,
        RadialMenuNestedLayerOption model,
        SimpleRadialMenuSettings settings
    )
    {
        var container = new RadialContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            InitialRadius = model.ContainerRadius!.Value,
            ReserveSpaceForHiddenChildren = false,
            Visible = false
        };
        foreach (var nested in model.Nested)
        {
            if (nested is RadialMenuNestedLayerOption nestedMenuModel)
            {
                var linkButton = RecursiveContainerExtraction(sprites, rootControlChildren, nestedMenuModel, settings);
                container.AddChild(linkButton);
            }
            else
            {
                var button = ConvertToButton(nested, sprites, settings, false);
                container.AddChild(button);
            }
        }
        rootControlChildren.Add(container);

        var thisLayerLinkButton = ConvertToButton(model, sprites, settings, true);
        thisLayerLinkButton.TargetLayer = container;
        return thisLayerLinkButton;
    }

    private RadialMenuTextureButton ConvertToButton(
        RadialMenuOption model,
        SpriteSystem sprites,
        SimpleRadialMenuSettings settings,
        bool haveNested
    )
    {
        var button = settings.UseSectors
            ? ConvertToButtonWithSector(model, settings)
            : new RadialMenuTextureButton();
        button.SetSize = new Vector2(64f, 64f);
        button.ToolTip = model.ToolTip;

        if (model.Sprite != null)
        {
            var scale = new Vector2(3f, 3f);
            var texture = sprites.Frame0(model.Sprite);

            // Check if this is a colored option using the interface
            if (model is IColoredRadialMenuOption coloredOption)
            {
                var textureRect = new TextureRect
                {
                    VerticalAlignment = Control.VAlignment.Center,
                    HorizontalAlignment = Control.HAlignment.Center,
                    Texture = texture,
                    TextureScale = scale,
                    Modulate = coloredOption.SpriteColor
                };
                button.AddChild(textureRect);
            }
            else
            {
                button.TextureNormal = texture;
                button.Scale = scale;
            }
        }

        if (model is ColoredRadialMenuActionOption coloredActionOption)
        {
            button.OnPressed += _ =>
            {
                coloredActionOption.Execute();
                if (!haveNested)
                    Close();
            };
        }
        else if (model is RadialMenuActionOption actionOption)
        {
            button.OnPressed += _ =>
            {
                actionOption.OnPressed?.Invoke();
                if (!haveNested)
                    Close();
            };
        }
        else if (model is IRadialMenuAction customAction)
        {
            button.OnPressed += _ =>
            {
                customAction.Execute();
                if (!haveNested)
                    Close();
            };
        }

        return button;
    }

    private static RadialMenuTextureButtonWithSector ConvertToButtonWithSector(RadialMenuOption model, SimpleRadialMenuSettings settings)
    {
        var button = new RadialMenuTextureButtonWithSector
        {
            DrawBorder = settings.DisplayBorders,
            DrawBackground = !settings.NoBackground
        };
        if (model.BackgroundColor.HasValue)
        {
            button.BackgroundColor = model.BackgroundColor.Value;
        }

        if (model.HoverBackgroundColor.HasValue)
        {
            button.HoverBackgroundColor = model.HoverBackgroundColor.Value;
        }

        return button;
    }

    private void ClearExistingChildrenRadialButtons()
    {
        var toRemove = new List<Control>(ChildCount);
        foreach (var child in Children)
        {
            if (child != ContextualButton && child != MenuOuterAreaButton)
            {
                toRemove.Add(child);
            }
        }

        foreach (var control in toRemove)
        {
            Children.Remove(control);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (_attachMenuToEntity != null)
        {
            UpdatePosition();
        }
    }

    private void UpdatePosition()
    {
        if (!_entManager.TryGetComponent(_attachMenuToEntity, out TransformComponent? xform))
        {
            Close();
            return;
        }

        if (!xform.Coordinates.IsValid(_entManager))
        {
            Close();
            return;
        }

        var coords = _entManager.System<SpriteSystem>().GetSpriteScreenCoordinates((_attachMenuToEntity.Value, null, xform));

        if (!coords.IsValid)
        {
            Close();
            return;
        }

        OpenScreenAt(coords.Position, _clyde);
    }
}

public interface IRadialMenuAction
{
    void Execute();
}

public interface IColoredRadialMenuOption
{
    Color SpriteColor { get; }
}

public class ColoredRadialMenuActionOption : RadialMenuOption, IRadialMenuAction, IColoredRadialMenuOption
{
    public Color SpriteColor { get; init; } = Color.White;
    public System.Action OnPressed { get; }

    public ColoredRadialMenuActionOption(System.Action onPressed)
    {
        OnPressed = onPressed;
    }

    public void Execute()
    {
        OnPressed?.Invoke();
    }
}

public class ColoredRadialMenuActionOption<T> : RadialMenuOption, IRadialMenuAction, IColoredRadialMenuOption
{
    public Color SpriteColor { get; init; } = Color.White;
    public System.Action<T> OnPressed { get; }
    public T Data { get; }

    public ColoredRadialMenuActionOption(System.Action<T> onPressed, T data)
    {
        OnPressed = onPressed;
        Data = data;
    }

    public void Execute()
    {
        OnPressed?.Invoke(Data);
    }
}
