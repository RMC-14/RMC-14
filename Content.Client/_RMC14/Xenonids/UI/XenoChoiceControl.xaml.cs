using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._RMC14.Xenonids.UI;

[GenerateTypedNameReferences]
[Virtual]
public partial class XenoChoiceControl : Control
{
    private static readonly Color LeaderColor = Color.FromHex("#FFBF00");
    private static readonly Color PlasmaColor = Color.FromHex("#1576BE");
    private static readonly Color PlasmaHighlightColor = Color.FromHex("#3590D3");
    private static readonly Color HealColor = Color.FromHex("#236C40");
    private static readonly Color HealHighlightColor = Color.FromHex("#36A964");

    public XenoChoiceControl()
    {
        RobustXamlLoader.Load(this);
        Plasma.ForegroundStyleBoxOverride = new StyleBoxFlat(Color.LightSkyBlue);
        Health.ForegroundStyleBoxOverride = new StyleBoxFlat(Color.LimeGreen);
        LeaderBox.ModulateSelfOverride = LeaderColor;

        PlasmaButton.ModulateSelfOverride = PlasmaColor;
        HealButton.ModulateSelfOverride = HealColor;
        PlasmaButton.OnMouseEntered += OnPlasmaHovered;
        PlasmaButton.OnMouseExited += OnPlasmaButtonStopHovering;
        HealButton.OnMouseEntered += OnHealHovered;
        HealButton.OnMouseExited += OnHealButtonStopHovering;
    }

    public void Set(string name, Texture? texture)
    {
        NameLabel.SetMessage(name);
        Texture.Texture = texture;
    }

    public void Set(FormattedMessage msg, Texture? texture)
    {
        NameLabel.SetMessage(msg);
        Texture.Texture = texture;
    }

    public void SetName(string name)
    {
        Button.Name = name;
    }

    public void SetLeader(Texture? texture)
    {
        LeaderStar.Texture = texture;
        LeaderStar.Visible = true;
        LeaderBox.Visible = true;
        LeaderBar.Visible = true;
    }

    public void SetHealth(float health)
    {
        Health.Value = health;
        if (health <= 0)
            Health.BackgroundStyleBoxOverride = new StyleBoxFlat(Color.Red);
        else
            Health.BackgroundStyleBoxOverride = new StyleBoxFlat(Color.Gray);

        Health.Visible = true;
    }

    public void SetPlasma(float plasma)
    {
        Plasma.Value = plasma;
        Plasma.Visible = true;
    }

    public void SetEvo(int evo)
    {
        EvoPoints.Text = $"Evo: {evo}";
        EvoPoints.Visible = true;
    }


    public void OnPlasmaHovered(GUIMouseHoverEventArgs args)
    {
        if (args.SourceControl is not Button button)
            return;
        button.ModulateSelfOverride = PlasmaHighlightColor;
    }

    public void OnHealHovered(GUIMouseHoverEventArgs args)
    {
        if (args.SourceControl is not Button button)
            return;
        button.ModulateSelfOverride = HealHighlightColor;
    }

    public void OnHealButtonStopHovering(GUIMouseHoverEventArgs args)
    {
        if (args.SourceControl is not Button button)
            return;
        button.ModulateSelfOverride = HealColor;
    }

    public void OnPlasmaButtonStopHovering(GUIMouseHoverEventArgs args)
    {
        if (args.SourceControl is not Button button)
            return;
        button.ModulateSelfOverride = PlasmaColor;
    }

}
