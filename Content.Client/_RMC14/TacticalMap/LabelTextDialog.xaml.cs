using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;

namespace Content.Client._RMC14.TacticalMap;

[GenerateTypedNameReferences]
public sealed partial class LabelTextDialog : DefaultWindow
{
    public event Action<string>? OnLabelConfirmed;
    public event Action? OnLabelDeleted;
    private Vector2i _position;
    private bool _isEdit;
    private bool _needsFocus = false;

    public LabelTextDialog()
    {
        RobustXamlLoader.Load(this);
        SetupEventHandlers();
    }

    public LabelTextDialog(Vector2i position, string existingText = "") : this()
    {
        Initialize(position, existingText);
    }

    private void Initialize(Vector2i position, string existingText = "")
    {
        _position = position;
        _isEdit = !string.IsNullOrEmpty(existingText);
        Title = _isEdit ? Loc.GetString("ui-tactical-map-label-dialog-edit-title") : Loc.GetString("ui-tactical-map-label-dialog-create-title");
        TextEdit.Text = existingText;
        DeleteButton.Visible = _isEdit;
        TextEdit.Editable = true;
        TextEdit.CanKeyboardFocus = true;
        _needsFocus = true;
    }

    protected override void Opened()
    {
        base.Opened();
        _needsFocus = true;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        if (_needsFocus && TextEdit != null)
        {
            TextEdit.GrabKeyboardFocus();
            if (!string.IsNullOrEmpty(TextEdit.Text))
            {
                TextEdit.CursorPosition = TextEdit.Text.Length;
            }
            else
            {
                TextEdit.CursorPosition = 0;
            }
            _needsFocus = false;
        }
    }

    private void SetupEventHandlers()
    {
        OkButton.OnPressed += _ => HandleConfirm();
        CancelButton.OnPressed += _ => Close();
        DeleteButton.OnPressed += _ => HandleDelete();
        TextEdit.OnTextEntered += _ => HandleConfirm();
    }

    private void HandleConfirm()
    {
        string text = TextEdit.Text?.Trim() ?? string.Empty;
        OnLabelConfirmed?.Invoke(text);
        Close();
    }

    private void HandleDelete()
    {
        OnLabelDeleted?.Invoke();
        Close();
    }

    public static void Show(Vector2i position, string existingText = "",
        Action<string>? onConfirmed = null, Action? onDeleted = null)
    {
        LabelTextDialog dialog = new LabelTextDialog(position, existingText);
        if (onConfirmed != null)
            dialog.OnLabelConfirmed += onConfirmed;
        if (onDeleted != null)
            dialog.OnLabelDeleted += onDeleted;
        dialog.OpenCentered();
    }
}
