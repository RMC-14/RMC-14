using System.Numerics;
using Content.Client._RMC14.UserInterface;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._RMC14.TacticalMap;

[GenerateTypedNameReferences]
public sealed partial class TacticalMapWindow : RMCPopOutWindow
{
    private static readonly ISawmill _logger = Logger.GetSawmill("tactical_map_settings");
    protected override Control Control => Wrapper;
    
    private TacticalMapSettingsManager? _settingsManager;
    private bool _settingsLoaded = false;
    private string? _currentMapName;

    public TacticalMapWindow()
    {
        InitializeSettings();

        Vector2i targetSize = new(600, 600);
        Vector2 targetPosition = new(-1, -1);

        if (_settingsLoaded && _settingsManager != null)
        {
            try
            {
                var settings = _settingsManager.LoadSettings(_currentMapName);

                if (settings.WindowSize.X > 0 && settings.WindowSize.Y > 0)
                {
                    targetSize = new Vector2i((int)settings.WindowSize.X, (int)settings.WindowSize.Y);
                }

                if (settings.WindowPosition.X != -1.0f || settings.WindowPosition.Y != -1.0f)
                {
                    targetPosition = new Vector2(
                        Math.Max(0, settings.WindowPosition.X),
                        Math.Max(0, settings.WindowPosition.Y)
                    );
                }
            }
            catch (Exception ex)
            {
                _logger.Warning($"Failed to load window settings for map '{_currentMapName}', using defaults: {ex}");
            }
        }

        SetSize = targetSize;
        RobustXamlLoader.Load(this);

        if (targetPosition.X != -1.0f && targetPosition.Y != -1.0f)
        {
            LayoutContainer.SetPosition(this, targetPosition);
        }

        OnPopout += () => Wrapper.ColorsButton.Visible = false;
        OnClose += OnWindowClose;
    }

    public void SetMapEntity(string? mapName)
    {
        if (_currentMapName == mapName)
            return;

        _currentMapName = mapName;

        if (_settingsLoaded && _settingsManager != null)
        {
            LoadWindowSettings();
        }
    }

    private void InitializeSettings()
    {
        try
        {
            _settingsManager = IoCManager.Resolve<TacticalMapSettingsManager>();
            _settingsLoaded = true;
        }
        catch (Exception ex)
        {
            _logger.Warning($"Failed to initialize tactical map settings manager: {ex}");
            _settingsLoaded = false;
        }
    }

    private void LoadWindowSettings()
    {
        if (!_settingsLoaded || _settingsManager == null)
            return;

        try
        {
            var settings = _settingsManager.LoadSettings(_currentMapName);

            if (settings.WindowSize.X > 0 && settings.WindowSize.Y > 0)
            {
                var size = new Vector2i((int)settings.WindowSize.X, (int)settings.WindowSize.Y);
                SetSize = size;
            }

            if (settings.WindowPosition.X != -1.0f || settings.WindowPosition.Y != -1.0f)
            {
                var position = new Vector2(
                    Math.Max(0, settings.WindowPosition.X),
                    Math.Max(0, settings.WindowPosition.Y)
                );
                LayoutContainer.SetPosition(this, position);
            }
        }
        catch (Exception ex)
        {
            _logger.Warning($"Failed to load window settings for map '{_currentMapName}': {ex}");
        }
    }

    private void OnWindowClose()
    {
        if (_settingsManager == null || Wrapper == null)
            return;

        try
        {
            var currentSettings = Wrapper.GetCurrentSettings();

            currentSettings.WindowSize = new Vector2(SetSize.X, SetSize.Y);
            currentSettings.WindowPosition = new Vector2(Position.X, Position.Y);

            _settingsManager.SaveSettings(currentSettings, _currentMapName);
        }
        catch (Exception ex)
        {
            _logger.Error($"Failed to save window settings on close for map '{_currentMapName}': {ex}");
        }
    }
}
