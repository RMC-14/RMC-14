using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using TerraFX.Interop.Xlib;

namespace Content.Client._RMC14.Admin.ChatBans;

[GenerateTypedNameReferences]
public sealed partial class RMCAdminChatBanWindow : DefaultWindow
{
    public uint Multiplier { get; private set; }

    public RMCAdminChatBanWindow()
    {
        RobustXamlLoader.Load(this);

        TimeEdit.OnTextChanged += OnTimeChanged;

        TimeOption.AddItem(Loc.GetString("ban-panel-minutes"), (int) Multipliers.Minutes);
        TimeOption.AddItem(Loc.GetString("ban-panel-hours"), (int) Multipliers.Hours);
        TimeOption.AddItem(Loc.GetString("ban-panel-days"), (int) Multipliers.Days);
        TimeOption.AddItem(Loc.GetString("ban-panel-weeks"), (int) Multipliers.Weeks);
        TimeOption.AddItem(Loc.GetString("ban-panel-months"), (int) Multipliers.Months);
        TimeOption.AddItem(Loc.GetString("ban-panel-years"), (int) Multipliers.Years);
        TimeOption.AddItem(Loc.GetString("ban-panel-permanent"), (int) Multipliers.Permanent);

        TimeOption.OnItemSelected += args =>
        {
            TimeOption.SelectId(args.Id);
            OnMultiplierChanged();
        };

        TimeOption.SelectId((int) Multipliers.Minutes);
    }

    private void OnTimeChanged(LineEdit.LineEditEventArgs args)
    {
        TimeEdit.Text = args.Text;
        if (!double.TryParse(args.Text, out _))
        {
            ExpiresLabel.Text = Loc.GetString("generic-error");
            TimeEdit.ModulateSelfOverride = Color.Red;
            SubmitButton.Disabled = true;
            return;
        }

        TimeEdit.ModulateSelfOverride = null;
        SubmitButton.Disabled = false;
        UpdateExpiresLabel();
    }

    private void OnMultiplierChanged()
    {
        TimeEdit.Editable = TimeOption.SelectedId != (int) Multipliers.Permanent;
        Multiplier = TimeOption.SelectedId switch
        {
            (int) Multipliers.Minutes => 1,
            (int) Multipliers.Hours => 60,
            (int) Multipliers.Days => 60 * 24,
            (int) Multipliers.Weeks => 60 * 24 * 7,
            (int) Multipliers.Months => 60 * 24 * 30,
            (int) Multipliers.Years => 60 * 24 * 365,
            (int) Multipliers.Permanent => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(TimeOption.SelectedId), "Multiplier out of range"),
        };

        UpdateExpiresLabel();
    }

    private void UpdateExpiresLabel()
    {
        if (!double.TryParse(TimeEdit.Text, out var time))
            time = 0;

        var minutes = (uint) (time * Multiplier);

        try
        {
            ExpiresLabel.Text = minutes == 0
                ? $"{Loc.GetString("admin-note-editor-expiry-label")} {Loc.GetString("server-ban-string-never")}"
                : $"{Loc.GetString("admin-note-editor-expiry-label")} {DateTime.Now + TimeSpan.FromMinutes(minutes):yyyy/MM/dd HH:mm:ss}";
        }
        catch (ArgumentOutOfRangeException)
        {
            ExpiresLabel.Text = Loc.GetString("generic-error");
            TimeEdit.ModulateSelfOverride = Color.Red;
            SubmitButton.Disabled = true;
        }
    }

    private enum Multipliers
    {
        Minutes,
        Hours,
        Days,
        Weeks,
        Months,
        Years,
        Permanent,
    }
}
