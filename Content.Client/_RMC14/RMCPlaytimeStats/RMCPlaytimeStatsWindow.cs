using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Localizations;

namespace Content.Client._RMC14.RMCPlaytimeStats;

[GenerateTypedNameReferences]
public sealed partial class RMCPlaytimeStatsWindow : FancyWindow
{
    [Dependency] private readonly JobRequirementsManager _jobRequirementsManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    
    private readonly Color _altColor = Color.FromHex("#292B38");
    private readonly Color _defaultColor = Color.FromHex("#2F2F3B");
    private readonly Color _buttonSelectedColor = Color.FromHex("#3E6E4B");
    private readonly Color _buttonNormalColor = Color.FromHex("#2F2F3B");
    private bool _useAltColor;
    private Button? _selectedButton;

    public RMCPlaytimeStatsWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        PopulatePlaytimeHeader();
        PopulatePlaytimeData();
        PopulateDepartmentButtons();
    }

    private void PopulateDepartmentButtons()
    {
        var rolePlaytimes = _jobRequirementsManager.FetchPlaytimeJobIdByRoles();
        var departmentsWithPlaytime = new Dictionary<string, (DepartmentPrototype Dept, List<(JobPrototype Job, TimeSpan Time)> Roles)>();

        foreach (var rolePlaytime in rolePlaytimes)
        {
            var jobId = rolePlaytime.Key;
            var playtime = rolePlaytime.Value;

            if (!_prototypeManager.TryIndex<JobPrototype>(jobId, out var job))
                continue;

            var depts = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
                .Where(d => d.Roles.Contains(job.ID))
                .ToList();

            if (depts.Count == 0)
                continue;

            foreach (var dept in depts)
            {
                if (!departmentsWithPlaytime.TryGetValue(dept.ID, out var deptData))
                {
                    deptData = (dept, new List<(JobPrototype, TimeSpan)>());
                    departmentsWithPlaytime[dept.ID] = deptData;
                }

                deptData.Roles.Add((job, playtime));
            }
        }

        var generalButton = new Button
        {
            Text = Loc.GetString("ui-playtime-general-tab"),
            HorizontalExpand = true,
            ToggleMode = true,
            Pressed = true
        };
        generalButton.OnPressed += _ => ShowGeneralTab();
        DepartmentButtons.AddChild(generalButton);
        _selectedButton = generalButton;

        if (departmentsWithPlaytime.Count > 0)
        {
            var sortedDepartments = departmentsWithPlaytime.Values
                .OrderBy(d => d.Dept, DepartmentUIComparer.Instance)
                .ToList();

            foreach (var (dept, roles) in sortedDepartments)
            {
                var button = new Button
                {
                    Text = Loc.GetString(dept.Name),
                    HorizontalExpand = true,
                    ToggleMode = true,
                    ToolTip = Loc.GetString(dept.Name)
                };
                
                button.OnPressed += _ => ShowDepartmentTab(dept, roles);
                DepartmentButtons.AddChild(button);
            }
        }
    }

    private void ShowGeneralTab()
    {
        if (_selectedButton != null)
        {
            _selectedButton.Pressed = false;
        }

        foreach (var child in DepartmentButtons.Children)
        {
            if (child is Button button && button.Text == Loc.GetString("ui-playtime-general-tab"))
            {
                button.Pressed = true;
                _selectedButton = button;
                break;
            }
        }

        GeneralTab.Visible = true;
        DepartmentContent.Visible = false;
    }

    private void ShowDepartmentTab(DepartmentPrototype dept, List<(JobPrototype Job, TimeSpan Time)> roles)
    {
        if (_selectedButton != null)
        {
            _selectedButton.Pressed = false;
        }

        var deptName = Loc.GetString(dept.Name);
        foreach (var child in DepartmentButtons.Children)
        {
            if (child is Button button && button.Text == deptName)
            {
                button.Pressed = true;
                _selectedButton = button;
                break;
            }
        }

        GeneralTab.Visible = false;
        DepartmentContent.RemoveAllChildren();

        var content = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
            Margin = new Thickness(0, 5, 0, 0)
        };

        var deptTotalTime = roles.Sum(r => r.Time.Ticks);
        var deptTotalTimeSpan = new TimeSpan(deptTotalTime);
        var deptTotalLabel = new Label
        {
            Text = Loc.GetString("ui-playtime-department-total",
                ("department", deptName),
                ("time", ContentLocalizationManager.FormatPlaytime(deptTotalTimeSpan))),
            Margin = new Thickness(0, 0, 0, 5)
        };

        content.AddChild(deptTotalLabel);
        content.AddChild(new HSeparator { Margin = new Thickness(0, 5, 0, 5) });

        var scrollContainer = new ScrollContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true
        };

        var rolesList = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical
        };

        var header = new RMCPlaytimeStatsHeader();
        header.OnHeaderClicked += (header, direction) =>
            HeaderClicked(header, direction, rolesList);
        header.BackgroundColorPlaytimePanel.PanelOverride = new StyleBoxFlat(_altColor);
        rolesList.AddChild(header);
        rolesList.AddChild(new HSeparator());

        _useAltColor = false;
        foreach (var (job, playtime) in roles.OrderBy(r => Loc.GetString(r.Job.Name)))
        {
            var entry = new RMCPlaytimeStatsEntry(
                Loc.GetString(job.Name),
                playtime,
                new StyleBoxFlat(_useAltColor ? _altColor : _defaultColor));
            rolesList.AddChild(entry);
            _useAltColor ^= true;
        }

        scrollContainer.AddChild(rolesList);
        content.AddChild(scrollContainer);
        DepartmentContent.AddChild(content);
        DepartmentContent.Visible = true;
    }

    private void PopulatePlaytimeData()
    {
        var rolePlaytimes = _jobRequirementsManager.FetchPlaytimeByRoles();
        var overallPlaytime = TimeSpan.Zero;
        var hasAnyPlaytime = false;

        RolesPlaytimeList.RemoveAllChildren();
        PopulatePlaytimeHeader();

        var rolesWithPlaytime = rolePlaytimes
            .OrderBy(kvp => Loc.GetString(kvp.Key))
            .ToList();

        _useAltColor = false;
        foreach (var rolePlaytime in rolesWithPlaytime)
        {
            var role = rolePlaytime.Key;
            var playtime = rolePlaytime.Value;
            
            overallPlaytime += playtime;
            hasAnyPlaytime = true;
            
            var entry = new RMCPlaytimeStatsEntry(
                Loc.GetString(role), 
                playtime,
                new StyleBoxFlat(_useAltColor ? _altColor : _defaultColor));
            RolesPlaytimeList.AddChild(entry);
            _useAltColor ^= true;
        }

        OverallPlaytimeLabel.Text = hasAnyPlaytime 
            ? ContentLocalizationManager.FormatPlaytime(overallPlaytime)
            : Loc.GetString("ui-playtime-no-data");
    }

    private void HeaderClicked(RMCPlaytimeStatsHeader.Header header, 
        RMCPlaytimeStatsHeader.SortDirection direction,
        BoxContainer targetContainer)
    {
        switch (header)
        {
            case RMCPlaytimeStatsHeader.Header.Role:
                SortByRole(direction, targetContainer);
                break;
            case RMCPlaytimeStatsHeader.Header.Playtime:
                SortByPlaytime(direction, targetContainer);
                break;
        }
    }

    private void SortByRole(RMCPlaytimeStatsHeader.SortDirection direction, BoxContainer container)
    {
        var header = container.GetChild(0) as RMCPlaytimeStatsHeader;
        var entries = container.Children.OfType<RMCPlaytimeStatsEntry>().ToList();

        container.RemoveAllChildren();
        if (header != null) container.AddChild(header);
        container.AddChild(new HSeparator());

        var sortedEntries = (direction == RMCPlaytimeStatsHeader.SortDirection.Ascending)
            ? entries.OrderBy(entry => entry.RoleText).ToList()
            : entries.OrderByDescending(entry => entry.RoleText).ToList();

        _useAltColor = false;
        foreach (var entry in sortedEntries)
        {
            var styleBox = new StyleBoxFlat { BackgroundColor = _useAltColor ? _altColor : _defaultColor };
            entry.UpdateShading(styleBox);
            container.AddChild(entry);
            _useAltColor ^= true;
        }
    }

    private void SortByPlaytime(RMCPlaytimeStatsHeader.SortDirection direction, BoxContainer container)
    {
        var header = container.GetChild(0) as RMCPlaytimeStatsHeader;
        var entries = container.Children.OfType<RMCPlaytimeStatsEntry>().ToList();

        container.RemoveAllChildren();
        if (header != null) container.AddChild(header);
        container.AddChild(new HSeparator());

        var sortedEntries = (direction == RMCPlaytimeStatsHeader.SortDirection.Ascending)
            ? entries.OrderBy(entry => entry.Playtime).ToList()
            : entries.OrderByDescending(entry => entry.Playtime).ToList();

        _useAltColor = false;
        foreach (var entry in sortedEntries)
        {
            var styleBox = new StyleBoxFlat { BackgroundColor = _useAltColor ? _altColor : _defaultColor };
            entry.UpdateShading(styleBox);
            container.AddChild(entry);
            _useAltColor ^= true;
        }
    }

    private void PopulatePlaytimeHeader()
    {
        var header = new RMCPlaytimeStatsHeader();
        header.OnHeaderClicked += (header, direction) => 
            HeaderClicked(header, direction, RolesPlaytimeList);
        header.BackgroundColorPlaytimePanel.PanelOverride = new StyleBoxFlat(_altColor);
        RolesPlaytimeList.AddChild(header);
    }
}