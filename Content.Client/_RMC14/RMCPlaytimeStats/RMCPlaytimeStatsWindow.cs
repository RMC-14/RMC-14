using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Localizations;
using Content.Shared._RMC14.Medal;
using Content.Shared._RMC14.CCVar;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Client.GameObjects;
using Robust.Shared.Utility;

namespace Content.Client._RMC14.RMCPlaytimeStats;

[GenerateTypedNameReferences]
public sealed partial class RMCPlaytimeStatsWindow : FancyWindow
{
    [Dependency] private readonly JobRequirementsManager _jobRequirementsManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConfigurationManager _config = default!;
    
    private readonly Color _altColor = Color.FromHex("#292B38");
    private readonly Color _defaultColor = Color.FromHex("#2F2F3B");
    private readonly Color _buttonSelectedColor = Color.FromHex("#3E6E4B");
    private readonly Color _buttonNormalColor = Color.FromHex("#2F2F3B");
    private bool _useAltColor;
    private Button? _selectedButton;

    private TimeSpan _bronzeTime;
    private TimeSpan _silverTime;
    private TimeSpan _goldTime;
    private TimeSpan _platinumTime;
    private TimeSpan _rubyTime;
    private TimeSpan _emeraldTime;
    private TimeSpan _amethystTime;
    private TimeSpan _prismaticTime;

    public RMCPlaytimeStatsWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        LoadMedalTimes();
        PopulateDepartmentButtons();
        ShowGeneralTab();
    }

    private void LoadMedalTimes()
    {
        _bronzeTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeBronzeMedalTimeHours));
        _silverTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeSilverMedalTimeHours));
        _goldTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeGoldMedalTimeHours));
        _platinumTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimePlatinumMedalTimeHours));
        _rubyTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeRubyMedalTimeHours));
        _emeraldTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeEmeraldMedalTimeHours));
        _amethystTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimeAmethystMedalTimeHours));
        _prismaticTime = TimeSpan.FromHours(_config.GetCVar(RMCCVars.RMCPlaytimePrismaticMedalTimeHours));
    }

    private RMCPlaytimeMedalType? GetMedalType(TimeSpan playtime)
    {
        if (playtime >= _prismaticTime)
            return RMCPlaytimeMedalType.Prismatic;
        else if (playtime >= _amethystTime)
            return RMCPlaytimeMedalType.Amethyst;
        else if (playtime >= _rubyTime)
            return RMCPlaytimeMedalType.Ruby;
        else if (playtime >= _emeraldTime)
            return RMCPlaytimeMedalType.Emerald;
        else if (playtime >= _platinumTime)
            return RMCPlaytimeMedalType.Platinum;
        else if (playtime >= _goldTime)
            return RMCPlaytimeMedalType.Gold;
        else if (playtime >= _silverTime)
            return RMCPlaytimeMedalType.Silver;
        else if (playtime >= _bronzeTime)
            return RMCPlaytimeMedalType.Bronze;
        
        return null;
    }

    private IEnumerable<RMCPlaytimeMedalType> GetMedalTypesDescending(RMCPlaytimeMedalType start)
    {
        for (var type = start; type >= RMCPlaytimeMedalType.Bronze; type--)
        {
            yield return type;
        }
    }

    private SpriteSpecifier.Rsi? GetMedalIcon(string? departmentId, TimeSpan playtime, string jobId)
    {
        if (!_prototypeManager.TryIndex<JobPrototype>(jobId, out var job) || job.Medals == null)
            return null;

        var medalType = GetMedalType(playtime);
        if (medalType == null)
            return null;

        if (departmentId == "CMXeno")
        {
            var iconName = medalType switch
            {
                RMCPlaytimeMedalType.Bronze => "hudxenoupgrade2-ui",
                RMCPlaytimeMedalType.Silver => "hudxenoupgrade3-ui",
                RMCPlaytimeMedalType.Gold => "hudxenoupgrade4-ui",
                _ => "hudxenoupgrade5-ui"
            };

            return new SpriteSpecifier.Rsi(new ResPath("/Textures/_RMC14/Interface/xeno_hud.rsi"), iconName);
        }

        foreach (var type in GetMedalTypesDescending(medalType.Value))
        {
            if (job.Medals.TryGetValue(type, out var medalId) &&
                _prototypeManager.TryIndex(medalId, out EntityPrototype? medalProto) &&
                medalProto.TryGetComponent<SpriteComponent>(out var sprite))
            {
                foreach (var layer in sprite.AllLayers)
                {
                    var rsi = layer.Rsi ?? layer.ActualRsi ?? sprite.BaseRSI;
                    if (rsi == null || !rsi.TryGetState(layer.RsiState, out var state))
                        continue;

                    var stateName = state.StateId.Name;
                    if (string.IsNullOrEmpty(stateName))
                        continue;

                    return new SpriteSpecifier.Rsi(rsi.Path, stateName);
                }
            }
        }

        return null;
    }

    private void PopulateDepartmentButtons()
    {
        var rolePlaytimes = _jobRequirementsManager.FetchPlaytimeJobIdByRoles();
        var departmentsWithPlaytime = new Dictionary<string, (DepartmentPrototype Dept, List<(JobPrototype Job, TimeSpan Time)> Roles)>();

        foreach (var rolePlaytime in rolePlaytimes)
        {
            var jobId = rolePlaytime.Key;
            var playtime = rolePlaytime.Value;

            if (!_prototypeManager.TryIndex<JobPrototype>(jobId, out var job))
                continue;

            var depts = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
                .Where(d => d.Roles.Contains(job.ID))
                .ToList();

            if (depts.Count == 0)
                continue;

            foreach (var dept in depts)
            {
                if (!departmentsWithPlaytime.TryGetValue(dept.ID, out var deptData))
                {
                    deptData = (dept, new List<(JobPrototype, TimeSpan)>());
                    departmentsWithPlaytime[dept.ID] = deptData;
                }

                deptData.Roles.Add((job, playtime));
            }
        }

        var generalButton = new Button
        {
            Text = Loc.GetString("ui-playtime-general-tab"),
            HorizontalExpand = true,
            ToggleMode = true,
            Pressed = true,
            Name = "GeneralTabButton"
        };

        generalButton.OnPressed += _ => ShowGeneralTab();
        DepartmentButtons.AddChild(generalButton);
        _selectedButton = generalButton;

        if (departmentsWithPlaytime.Count > 0)
        {
            var sortedDepartments = departmentsWithPlaytime.Values
                .OrderBy(d => d.Dept, DepartmentUIComparer.Instance)
                .ToList();

            foreach (var (dept, roles) in sortedDepartments)
            {
                var button = new Button
                {
                    Text = Loc.GetString(dept.Name),
                    HorizontalExpand = true,
                    ToggleMode = true,
                    ToolTip = Loc.GetString(dept.Name),
                    Name = dept.ID
                };
                
                button.OnPressed += _ => ShowDepartmentTab(dept, roles);
                DepartmentButtons.AddChild(button);
            }
        }
    }

    private void ShowDepartmentTab(DepartmentPrototype dept, List<(JobPrototype Job, TimeSpan Time)> roles)
    {
        if (_selectedButton != null)
        {
            _selectedButton.Pressed = false;
        }

        foreach (var child in DepartmentButtons.Children)
        {
            if (child is Button button && button.Name == dept.ID)
            {
                button.Pressed = true;
                _selectedButton = button;
                break;
            }
        }

        DepartmentContent.RemoveAllChildren();

        var content = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
            Margin = new Thickness(0, 5, 0, 0)
        };

        var deptTotalTime = roles.Sum(r => r.Time.Ticks);
        var deptTotalTimeSpan = new TimeSpan(deptTotalTime);
        var deptName = Loc.GetString(dept.Name);
        var deptTotalLabel = new Label
        {
            Text = Loc.GetString("ui-playtime-department-total",
                ("department", deptName),
                ("time", ContentLocalizationManager.FormatPlaytime(deptTotalTimeSpan))),
            Margin = new Thickness(0, 0, 0, 5)
        };

        content.AddChild(deptTotalLabel);
        content.AddChild(new HSeparator { Margin = new Thickness(0, 5, 0, 5) });

        var scrollContainer = new ScrollContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true
        };

        var rolesList = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical
        };

        var header = new RMCPlaytimeStatsHeader();
        header.OnHeaderClicked += (header, direction) =>
            HeaderClicked(header, direction, rolesList);
        header.BackgroundColorPlaytimePanel.PanelOverride = new StyleBoxFlat(_altColor);
        rolesList.AddChild(header);
        rolesList.AddChild(new HSeparator());

        _useAltColor = false;
        foreach (var (job, playtime) in roles.OrderBy(r => Loc.GetString(r.Job.Name)))
        {
            var entry = new RMCPlaytimeStatsEntry(
                Loc.GetString(job.Name),
                playtime,
                new StyleBoxFlat(_useAltColor ? _altColor : _defaultColor),
                GetMedalIcon(dept.ID, playtime, job.ID));
                
            rolesList.AddChild(entry);
            _useAltColor ^= true;
        }

        scrollContainer.AddChild(rolesList);
        content.AddChild(scrollContainer);
        DepartmentContent.AddChild(content);
        DepartmentContent.Visible = true;
    }

    private void ShowGeneralTab()
    {
        if (_selectedButton != null)
        {
            _selectedButton.Pressed = false;
        }

        foreach (var child in DepartmentButtons.Children)
        {
            if (child is Button button && button.Name == "GeneralTabButton")
            {
                button.Pressed = true;
                _selectedButton = button;
                break;
            }
        }

        DepartmentContent.RemoveAllChildren();
        var rolePlaytimes = _jobRequirementsManager.FetchPlaytimeJobIdByRoles();

        var content = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true,
            Margin = new Thickness(0, 5, 0, 0)
        };

        var totalTime = rolePlaytimes.Sum(r => r.Value.Ticks);
        var overallLabel = new Label
        {
            Text = Loc.GetString("ui-playtime-overall", ("time", new TimeSpan(totalTime))),
            Margin = new Thickness(0, 0, 0, 5)
        };

        content.AddChild(overallLabel);
        content.AddChild(new HSeparator { Margin = new Thickness(0, 5, 0, 5) });

        var scrollContainer = new ScrollContainer
        {
            HorizontalExpand = true,
            VerticalExpand = true
        };

        var rolesList = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical
        };

        var header = new RMCPlaytimeStatsHeader();
        header.OnHeaderClicked += (header, direction) =>
            HeaderClicked(header, direction, rolesList);

        header.BackgroundColorPlaytimePanel.PanelOverride = new StyleBoxFlat(_altColor);

        rolesList.AddChild(header);
        rolesList.AddChild(new HSeparator());
        _useAltColor = false;

        foreach (var kvp in rolePlaytimes.OrderBy(r => Loc.GetString(r.Key)))
        {
            if (!_prototypeManager.TryIndex<JobPrototype>(kvp.Key, out var job))
                continue;

            var dept = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
                .Where(d => d.Roles.Contains(job.ID))
                .FirstOrDefault();

            var entry = new RMCPlaytimeStatsEntry(
                job.LocalizedName,
                kvp.Value,
                new StyleBoxFlat(_useAltColor ? _altColor : _defaultColor),
                GetMedalIcon(dept?.ID, kvp.Value, kvp.Key));
                
            rolesList.AddChild(entry);
            _useAltColor ^= true;
        }

        scrollContainer.AddChild(rolesList);
        content.AddChild(scrollContainer);
        DepartmentContent.AddChild(content);
        DepartmentContent.Visible = true;
    }

    private void HeaderClicked(RMCPlaytimeStatsHeader.Header header, 
        RMCPlaytimeStatsHeader.SortDirection direction,
        BoxContainer targetContainer)
    {
        switch (header)
        {
            case RMCPlaytimeStatsHeader.Header.Role:
                SortByRole(direction, targetContainer);
                break;

            case RMCPlaytimeStatsHeader.Header.Playtime:
                SortByPlaytime(direction, targetContainer);
                break;
        }
    }

    private void SortByRole(RMCPlaytimeStatsHeader.SortDirection direction, BoxContainer container)
    {
        var header = container.GetChild(0) as RMCPlaytimeStatsHeader;
        var entries = container.Children.OfType<RMCPlaytimeStatsEntry>().ToList();

        container.RemoveAllChildren();

        if (header != null) 
            container.AddChild(header);

        container.AddChild(new HSeparator());

        var sortedEntries = (direction == RMCPlaytimeStatsHeader.SortDirection.Ascending)
            ? entries.OrderBy(entry => entry.RoleText).ToList()
            : entries.OrderByDescending(entry => entry.RoleText).ToList();

        _useAltColor = false;
        foreach (var entry in sortedEntries)
        {
            var styleBox = new StyleBoxFlat { BackgroundColor = _useAltColor ? _altColor : _defaultColor };
            entry.UpdateShading(styleBox);
            container.AddChild(entry);
            _useAltColor ^= true;
        }
    }

    private void SortByPlaytime(RMCPlaytimeStatsHeader.SortDirection direction, BoxContainer container)
    {
        var header = container.GetChild(0) as RMCPlaytimeStatsHeader;
        var entries = container.Children.OfType<RMCPlaytimeStatsEntry>().ToList();

        container.RemoveAllChildren();

        if (header != null)
            container.AddChild(header);

        container.AddChild(new HSeparator());

        var sortedEntries = (direction == RMCPlaytimeStatsHeader.SortDirection.Ascending)
            ? entries.OrderBy(entry => entry.Playtime).ToList()
            : entries.OrderByDescending(entry => entry.Playtime).ToList();

        _useAltColor = false;
        foreach (var entry in sortedEntries)
        {
            var styleBox = new StyleBoxFlat { BackgroundColor = _useAltColor ? _altColor : _defaultColor };
            entry.UpdateShading(styleBox);
            container.AddChild(entry);
            _useAltColor ^= true;
        }
    }
}
