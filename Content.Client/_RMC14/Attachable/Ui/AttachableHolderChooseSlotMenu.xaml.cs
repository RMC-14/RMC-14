using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._RMC14.Attachable.Ui;

[GenerateTypedNameReferences]
public sealed partial class AttachableHolderChooseSlotMenu : FancyWindow
{
    private readonly Dictionary<string, AttachableSlotControl> _attachableSlotControls;

    public AttachableHolderChooseSlotMenu()
    {
        RobustXamlLoader.Load(this);

        _attachableSlotControls = new Dictionary<string, AttachableSlotControl>();
    }

    public void UpdateMenu(List<string> attachableSlots, Action<string> onPressed)
    {
        foreach (var slotId in attachableSlots)
        {
            if (!_attachableSlotControls.ContainsKey(slotId))
                AddSlotControl(slotId, onPressed);
        }
    }

    private void AddSlotControl(string slotId, Action<string> onPressed)
    {
        var slotControl = new AttachableSlotControl(slotId, onPressed);
        SlotsContainer.AddChild(slotControl);
        _attachableSlotControls.Add(slotId, slotControl);
    }

    private sealed class AttachableSlotControl : Control
    {
        public AttachableSlotControl(string slotId, Action<string> onPressed)
        {
            var button = new Button { Text = Loc.GetString(slotId) };
            button.OnPressed += _ => onPressed(slotId);
            AddChild(button);
        }
    }
}
