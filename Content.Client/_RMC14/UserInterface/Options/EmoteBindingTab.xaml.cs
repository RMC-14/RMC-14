using System.Linq;
using System.Text.Json;
using Content.Client.Guidebook.Richtext;
using Content.Client.Options.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.CCVar;
using Content.Shared._RMC14.CCVar;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Speech.Components;
using Newtonsoft.Json;
using Robust.Client.GameObjects;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._RMC14.UserInterface.Options;

[GenerateTypedNameReferences]
public sealed partial class EmoteBindingTab : ScrollContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;

    public List<OptionDropDownCVar<string>.ValueOption> HumanoidEmoteDropdownOptions = [];
    public List<OptionDropDownCVar<string>.ValueOption> XenoEmoteDropdownOptions = [];

    // Species -> Index -> EmoteProto
    private Dictionary<string, List<EmotePrototype>> _emoteBindingOptions =
        new Dictionary<string, List<EmotePrototype>>();
    private Dictionary<string, Dictionary<string, string>> _emoteBindingValues =
        new Dictionary<string, Dictionary<string, string>>();
    private SpriteSystem _spriteSystem;

    public EmoteBindingTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _spriteSystem = _entManager.System<SpriteSystem>();
        UpdateDropdowns();
    }

    private void CreateDropdowns(BoxContainer dropDownContainer, string type, int count)
    {
        for (int i = 1; i <= count; i++)
        {
            var newDropDown = new EmoteBindingDropDown($"{Loc.GetString($"rmc-ui-emote-binding-{type.ToLower()}-emote")} {i}");
            dropDownContainer.AddChild(newDropDown);
        }
    }

    public void UpdateDropdowns()
    {
        ScanForEmoteProtos();
        CreateDropdowns(HumanoidDropDowns, "Humanoid", 8);
        SetDropDownOptions(HumanoidDropDowns, "Humanoid");
        CreateDropdowns(XenoDropDowns, "Xeno", 8);
        SetDropDownOptions(XenoDropDowns, "Xeno");
        Control.Initialize();
    }

    private void SaveEmoteBindings()
    {
        //Logger.Log(LogLevel.Debug, $"Raw: {_emoteBindingValues}");
        var data = EmoteBindingToString(_emoteBindingValues);
        _configManager.SetCVar(RMCCVars.RMCEmoteBindings, data);
        _configManager.SaveToFile();
        //Logger.Log(LogLevel.Debug, $"Serialised: {data}");
    }

    // Converts the Dictionary data to a string that can be saved to the CVar.
    private string EmoteBindingToString(Dictionary<string, Dictionary<string, string>> variable)
    {
        var data = "";
        // For each Type
        foreach (var (bindingType, bindingDict) in variable)
        {
            var dictionaryString = "";
            // For each KeyBind+EmoteId
            foreach(var keyValues in bindingDict)
            {
                dictionaryString += keyValues.Key + ":" + keyValues.Value + ",";
            }
            data += bindingType + ">" + dictionaryString.TrimEnd(',', ' ') + "|";
        }
        return data.TrimEnd('|', ' ');
    }

    private void ScanForEmoteProtos()
    {
        // Get all emotes that are "spoken"
        var emoteProtos = _prototypeManager
            .EnumeratePrototypes<EmotePrototype>()
            .Where(emote => emote.Category == EmoteCategory.Vocal);

        // Filter emotes to Humanoid and Xeno lists
        _emoteBindingOptions["Humanoid"] = new List<EmotePrototype>();
        _emoteBindingOptions["Xeno"] = new List<EmotePrototype>();
        _emoteBindingValues["Humanoid"] = new Dictionary<string, string>();
        _emoteBindingValues["Xeno"] = new Dictionary<string, string>();

        foreach (var emoteProto in emoteProtos)
        {
            // Ensure whitelisting is enabled
            if (emoteProto.Whitelist == null || emoteProto.Whitelist.Components == null) {continue;}
            // Remove any that are whitelisted to Cyborgs
            if ((emoteProto.Whitelist.RequireAll == true && emoteProto.Whitelist.Tags!.Contains("SiliconEmotes"))) {continue;}

            // Filter by Species/Faction
            if (emoteProto.Whitelist.Components.Contains("Vocal"))
            {
                _emoteBindingOptions["Humanoid"].Add(emoteProto);
            }
            if (emoteProto.Whitelist.Components.Contains("Xeno"))
            {
                _emoteBindingOptions["Xeno"].Add(emoteProto);
            }
        }
    }

    private void SetDropDownOptions(BoxContainer dropDownContainer, string type)
    {
        foreach (var control in dropDownContainer.Children)
        {
            var dropDownBox = (BoxContainer)control;
            var dropDown = (OptionButton)dropDownBox.GetChild(2);
            var dropDownIndex = dropDownBox.GetPositionInParent();

            dropDown.AddItem(label: "None", id: 0);
            dropDown.OnItemSelected += args =>
            {
                var index = args.Button.Parent!.GetPositionInParent();
                if (args.Id == 0)
                {
                    _emoteBindingValues[type].Remove(index.ToString());
                }
                else
                {
                    Logger.Log(LogLevel.Debug, $"ArgID: {args.Id} | Index: {index} | Emote: {_emoteBindingOptions[type][args.Id-1].ID}");
                    _emoteBindingValues[type][index.ToString()] = _emoteBindingOptions[type][args.Id-1].ID;
                }
                dropDown.SelectId(args.Id);
                SaveEmoteBindings();
            };

            foreach (var emoteProto in _emoteBindingOptions[type])
            {
                // var label = emoteProto.Available
                //     ? Loc.GetString(emoteProto.Name)
                //     : $"* {Loc.GetString(emoteProto.Name)}";
                var label = Loc.GetString(emoteProto.Name);
                var icon = _spriteSystem.Frame0(emoteProto.Icon);
                dropDown.AddItem(icon: icon, label: label);
            }

            if (_emoteBindingValues[type].ContainsKey(dropDownIndex.ToString()))
            {
                dropDown.TrySelectId(int.Parse(_emoteBindingValues[type][dropDownIndex.ToString()]));
            }
        }
    }
}
