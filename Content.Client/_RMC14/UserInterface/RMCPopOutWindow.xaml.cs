using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._RMC14.UserInterface;

[GenerateTypedNameReferences]
[Virtual]
public partial class RMCPopOutWindow : DefaultWindow
{
    protected virtual Control Control { get; } = default!;

    public event Action? OnFinalClose;
    public event Action? OnPopout;

    private OSWindow? _popOutWindow;

    public RMCPopOutWindow()
    {
        RobustXamlLoader.Load(this);
        OnClose += FinalClose;
    }

    public void SetBui(BoundUserInterface bui)
    {
        OnFinalClose += bui.Close;

        var button = new Button { Text = "Pop Out", StyleClasses = { "OpenBoth" }};
        button.Margin = new Thickness(5, 0);
        if (!WindowHeader.Children.OfType<BoxContainer>().TryFirstOrDefault(out var header))
            return;

        header.AddChild(button);
        button.SetPositionInParent(header.ChildCount - 2);
        button.OnPressed += _ =>
        {
            OnClose -= FinalClose;

            _popOutWindow = new OSWindow
            {
                Title = Title ?? string.Empty,
                SetWidth = PixelWidth,
                SetHeight = PixelHeight,
            };

            Control.Orphan();
            Close();

            _popOutWindow.Closed += () => OnFinalClose?.Invoke();

            var panel = new PanelContainer();
            panel.PanelOverride = new StyleBoxFlat(Color.FromHex("#25252A"));
            panel.AddChild(Control);

            _popOutWindow.AddChild(panel);
            _popOutWindow.Show();

            OnPopout?.Invoke();
        };
    }

    private void FinalClose()
    {
        OnFinalClose?.Invoke();
    }

    public void DisposePopOut()
    {
        _popOutWindow?.Close();
    }
}
