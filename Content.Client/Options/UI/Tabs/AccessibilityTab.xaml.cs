using Content.Shared.CCVar;
using Content.Shared._RMC14.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Content.Client._RMC14.UserInterface;

namespace Content.Client.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AccessibilityTab : Control
{
    public AccessibilityTab()
    {
        RobustXamlLoader.Load(this);

        var chatColorModeEntries = new List<OptionDropDownCVar<string>.ValueOption>(); //RMC14
        foreach (var mode in Enum.GetValues(typeof(RMCChatColorMode)))
        {
            var key = mode.ToString()!;
            chatColorModeEntries.Add(new OptionDropDownCVar<string>.ValueOption(
                key,
                Loc.GetString($"rmc-ui-options-color-mode-{key.ToLowerInvariant()}")
            ));
        }


        Control.AddOptionCheckBox(CCVars.ChatEnableColorName, EnableColorNameCheckBox);
        Control.AddOptionCheckBox(CCVars.AccessibilityColorblindFriendly, ColorblindFriendlyCheckBox);
        Control.AddOptionCheckBox(CCVars.ReducedMotion, ReducedMotionCheckBox);
        Control.AddOptionPercentSlider(CCVars.ChatWindowOpacity, ChatWindowOpacitySlider);
        Control.AddOptionPercentSlider(CCVars.SpeechBubbleTextOpacity, SpeechBubbleTextOpacitySlider);
        Control.AddOptionPercentSlider(CCVars.SpeechBubbleSpeakerOpacity, SpeechBubbleSpeakerOpacitySlider);
        Control.AddOptionPercentSlider(CCVars.SpeechBubbleBackgroundOpacity, SpeechBubbleBackgroundOpacitySlider);

        Control.AddOptionCheckBox(RMCCVars.RMCUseAlternateSprites, RMCUseAlternateSpritesCheckBox);
        Control.AddOptionDropDown(RMCCVars.RMCChatColorMode, RMCChatColorModeOptionDropDown, chatColorModeEntries);

        Control.AddOptionCheckBox(CCVars.AccessibilityClientCensorNudity, CensorNudityCheckBox);

        Control.Initialize();
    }
}

